@{
    ViewData["Title"] = "Home Page";
}
<style type="text/css">
    body,
    #graph {
        height: 100vh;
    }

    .node .circle {
        stroke: #222;
        stroke-width: 1.5px;
    }

    .node .circle.ip {
        fill: #888;
    }

    .node .circle.domain {
        fill: #BBB;
    }

    .link {
        stroke: #999;
        stroke-opacity: .6;
        stroke-width: 1px;
    }
</style>

<p>
    hello world
</p>

<div id="graph"></div>

@section Scripts {
    <script src="~/lib/d3/d3.js"></script>
    <script src="~/lib/rxjs/modules/rx-lite/rx.lite.js"></script>
    <script>
        $(function () {
            visualization.init();
            visualization.startRefreshNodesJob();
            visualization.startDataManipulationJob();
        });

        var visualization = {
            width: 1000,
            height: 500,
            svg: '',
            force: '',
            nodes: '',
            links: '',

            init: function () {
                this.force = d3.layout.force();
                this.nodes = this.force.nodes();
                this.links = this.force.links();

                this.svg = d3.select("#graph").append("svg")
                    .attr("width", "100%").attr("height", this.height)
                    .attr("pointer-events", "all")
                    .attr("viewBox", "0 0 " + this.width + " " + this.height)
                    .attr("perserveAspectRatio", "xMinYMid")
                    .append("svg:g");

                this.initializeData();
            },

            initializeData: function () {
                d3.json("/api/nodes", function (error, graph) {
                    visualization.drawData(graph);

                    visualization.force
                        .distance(100)
                        .linkDistance(250)
                        .size([visualization.width, visualization.height])
                        .nodes(graph.nodes)
                        .links(graph.links)
                        .start();
                });

            },
            updateData: function () {
                d3.json("/api/nodes", function (error, graph) {
                    visualization.drawData(graph);

                    visualization.force
                        .distance(100)
                        .linkDistance(250)
                        .size([visualization.width, visualization.height])
                        .start();
                });
            },

            drawData: function (graph) {
                    var link = visualization.svg.selectAll(".link")
                        .data(graph.links);

                    link.exit().remove();

                    link.enter().append("line")
                        .attr("class", "link");

                    var node = visualization.svg.selectAll("g.node")
                        .data(graph.nodes);//, function (d) {
                            //return d.id;
                        //});

                    node.exit().remove();

                    var nodeEnter = node.enter().append("g")
                        .attr("class", function (d) { return "node " + d.label })
                        .call(visualization.force.drag);

                    nodeEnter.append("svg:circle")
                        .attr("r", 12)
                        .attr("id", function (d) { return "Node;" + d.id; })
                        .attr("class", function (d) { return "circle " + d.label });

                    nodeEnter.append("svg:title")
                        //.attr("class", "textClass")
                        .text(function (d) { return d.title; });


                    visualization.force.on("tick", function () {
                        node.attr("transform", function (d) {
                            return "translate(" + d.x + "," + d.y + ")";
                        });

                        link.attr("x1", function (d) { return d.source.x; })
                            .attr("y1", function (d) { return d.source.y; })
                            .attr("x2", function (d) { return d.target.x; })
                            .attr("y2", function (d) { return d.target.y; });
                    });
            },

            startDataManipulationJob: function () {
                var timer = Rx.Observable.interval(5050);

                var subscription = timer.subscribe(
                    visualization.manipulateData,
                    function (err) {
                        console.log('Error: ' + err);
                    },
                    function () {
                    }
                )
            },

            manipulateData: function () {
                if (Math.random() > .5) {
                    $.post("/api/add");
                    console.log("added node");
                }
                else {
                    $.post("/api/remove");
                    console.log("removed node");
                }
            },

            startRefreshNodesJob: function () {
                var timer = Rx.Observable.interval(5000);

                var subscription = timer.subscribe(
                    function () {
                        //d3.select("svg").selectAll("*").remove();
                        visualization.updateData();
                        console.log("updated");
                    },
                    function (err) {
                        console.log('Error: ' + err);
                    },
                    function () {
                    }
                )
            },
        };
    </script>
}